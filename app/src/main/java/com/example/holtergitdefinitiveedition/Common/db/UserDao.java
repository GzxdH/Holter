package com.example.holtergitdefinitiveedition.Common.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.holtergitdefinitiveedition.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "uname");
        public final static Property UserNum = new Property(2, int.class, "userNum", false, "unum");
        public final static Property UserSex = new Property(3, String.class, "userSex", false, "usex");
        public final static Property UserDate = new Property(4, String.class, "userDate", false, "udate");
        public final static Property UserHeight = new Property(5, String.class, "userHeight", false, "uheight");
        public final static Property UserWeight = new Property(6, String.class, "userWeight", false, "uweight");
        public final static Property UserDocNum = new Property(7, String.class, "userDocNum", false, "udocnum");
        public final static Property UserResult = new Property(8, String.class, "userResult", false, "uresult");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: uid
                "\"uname\" TEXT," + // 1: userName
                "\"unum\" INTEGER NOT NULL ," + // 2: userNum
                "\"usex\" TEXT," + // 3: userSex
                "\"udate\" TEXT," + // 4: userDate
                "\"uheight\" TEXT," + // 5: userHeight
                "\"uweight\" TEXT," + // 6: userWeight
                "\"udocnum\" TEXT," + // 7: userDocNum
                "\"uresult\" TEXT);"); // 8: userResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserNum());
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(4, userSex);
        }
 
        String userDate = entity.getUserDate();
        if (userDate != null) {
            stmt.bindString(5, userDate);
        }
 
        String userHeight = entity.getUserHeight();
        if (userHeight != null) {
            stmt.bindString(6, userHeight);
        }
 
        String userWeight = entity.getUserWeight();
        if (userWeight != null) {
            stmt.bindString(7, userWeight);
        }
 
        String userDocNum = entity.getUserDocNum();
        if (userDocNum != null) {
            stmt.bindString(8, userDocNum);
        }
 
        String userResult = entity.getUserResult();
        if (userResult != null) {
            stmt.bindString(9, userResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserNum());
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(4, userSex);
        }
 
        String userDate = entity.getUserDate();
        if (userDate != null) {
            stmt.bindString(5, userDate);
        }
 
        String userHeight = entity.getUserHeight();
        if (userHeight != null) {
            stmt.bindString(6, userHeight);
        }
 
        String userWeight = entity.getUserWeight();
        if (userWeight != null) {
            stmt.bindString(7, userWeight);
        }
 
        String userDocNum = entity.getUserDocNum();
        if (userDocNum != null) {
            stmt.bindString(8, userDocNum);
        }
 
        String userResult = entity.getUserResult();
        if (userResult != null) {
            stmt.bindString(9, userResult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getInt(offset + 2), // userNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userHeight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userWeight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userDocNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // userResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserNum(cursor.getInt(offset + 2));
        entity.setUserSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserHeight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserWeight(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserDocNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserResult(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
